#--------------------
#DISCOS
#--------------------
pvcreate /dev/sdb
vgcreate -n data /dev/sdb
lvcreate -n mysql -L 20G data
lvcreate -n vhosts -l  data   #(tamanho total disponivel de vgdisplay data)
mkfs.xfs /dev/data/vhosts
mkfs.xfs /dev/data/mysql

mkdir -p /var/www/vhosts
mkdir -p /var/lib/mysql

echo "/dev/data/vhosts				/var/www/vhosts		xfs	defaults	0 0" >> /etc/fatab
echo "/dev/data/mysql				/var/lib/mysql		xfs	defaults	0 0" >> /etc/fatab

#--------------------
# BASE
#--------------------
yum update -y 
yum upgrade -y
dnf -y install epel-release
yum update -y 
yum install glibc-langpack-en glibc-langpack-pt git vim wget net-tools htop iftop iotop nload nmon nethogs ntfs-3g  sshfs parted net-tools ethtool expect -y
echo 'LANG="pt_BR.utf8"' > /etc/locale.conf 

#Desativa segurança
sed -i 's/enforcing/disabled/g' /etc/selinux/config
setenforce 0
systemctl stop firewalld ; systemctl disable firewalld

#Agent Proxmox
dnf install qemu-guest-agent -y
systemctl enable --now  qemu-guest-agent 

#Instala Nginx 
sudo dnf -y install nginx
sudo systemctl enable --now nginx

#Instalar PHP83
Versao=83
VRemi="8.3"
sudo dnf install -y https://rpms.remirepo.net/enterprise/remi-release-9.rpm
sudo dnf module reset php -y
sudo dnf module enable php:remi-${VRemi} -y
# Instalar o PHP 8.3 e os módulos especificados
sudo dnf install -y php${VRemi} 
sudo dnf install -y php${Versao}-php-json
sudo dnf install -y php${Versao}-php-pdo
sudo dnf install -y php${Versao}-php-mysqlnd
sudo dnf install -y php${Versao}-php-cli
sudo dnf install -y php${Versao}-php-fpm
sudo dnf install -y php${Versao}-php-opcache
sudo dnf install -y php${Versao}-php-pecl-igbinary
sudo dnf install -y php${Versao}-php-pecl-msgpack
sudo dnf install -y php${Versao}-php-xml
sudo dnf install -y php${Versao}-php-mbstring
sudo dnf install -y php${Versao}-php-sodium
sudo dnf install -y php${Versao}-php-gd
sudo dnf install -y php${Versao}-php-pecl-redis6
sudo dnf install -y php${Versao}-php-pecl-mcrypt
sudo dnf install -y php${Versao}-php-intl
sudo dnf install -y php${Versao}-php-pecl-zip
sudo dnf install -y php${Versao}-php-pecl-mysql 
sudo dnf install -y php${Versao}*-imap*
sudo dnf install -y php${Versao}-php-gd 
sudo dnf install -y php${Versao}-php-zip 
sudo dnf install -y php${Versao}-php*imagick-im7*
sudo dnf install -y php${Versao}-php-gd 
sudo dnf install -y php${Versao}-php-zip  
sudo dnf install -y php${Versao}*-*xmlrpc*
sudo dnf install -y php${Versao}-php-pecl-apcu
sudo dnf install -y php${Versao}-php-pecl-simdjson
sudo systemctl enable --now php83-php-fpm

############################
site="blog.skelt.com.br"
site2="${site//./}"
userapp=blogskelt
############################

cd /etc/opt/remi/php83/php-fpm.d


________________________________________________________
cat > /etc/opt/remi/php83/php-fpm.d/${site}.conf << EOF
[${site}]
;cpu_affinity = 0 1 3
prefix = /var/www/system/php
user = ${userapp}
group = apache

listen = \$pool.sock
listen.owner = root
listen.group = apache
listen.mode = 0660

chdir = /

catch_workers_output = yes

php_value[memory_limit] = 2048M
php_value[disable_functions] = "opcache_get_status"
php_value[error_reporting] = 22519
php_value[max_execution_time] = 90
php_value[max_input_time] = 300
php_value[max_execution_time] = 300
php_value[open_basedir] = "/var/www/vhosts/\$pool/:/tmp/"
php_value[post_max_size] = 70M
php_value[upload_max_filesize] = 70M
php_value[opcache.enable] = 1
php_value[opcache.enable_cli] = 1
php_value[opcache.revalidate_freq] = 60
php_value[opcache.fast_shutdown] = 1
php_value[opcache.enable_file_override] = 1

pm = dynamic
pm.max_requests = 500
pm.max_children = 250
pm.max_spare_servers = 30
pm.min_spare_servers = 15
pm.process_idle_timeout = 15s
pm.start_servers = 15
EOF
_________________________________________________________________



#Instalar MySQL
sudo rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2023
sudo dnf install -y https://dev.mysql.com/get/mysql80-community-release-el9-1.noarch.rpm
sudo dnf install -y mysql-community-server
echo "default-authentication-plugin=mysql_native_password" >> /etc/my.cnf
sudo systemctl enable --now mysqld


#Configura SQL
NEW_ROOT_PASSWORD="1QF*Mgcsx&Mt@#" 
DB_MYSQL="wpcreamy"
USER_MYSQL="wpcreamy"
PASS_MYSQL="kv7AfE.zX5AVhF"

# Extrair a senha temporária do usuário root
ROOT_PASSWORD=$(sudo grep 'temporary password' /var/log/mysqld.log | awk '{print $NF}')

# Definir uma nova senha segura para o usuário root
echo $NEW_ROOT_PASSWORD > /root/mysqlpass.txt
mysql --connect-expired-password -u root -p "$ROOT_PASSWORD" <<EOF
ALTER USER 'root'@'localhost' IDENTIFIED BY '$NEW_ROOT_PASSWORD';
EOF
# Configurar o banco de dados para o WordPress
DB_NAME="wordpress_db"
DB_USER="wordpress_user"
DB_PASS="strong_password_here"

sudo mysql -e "CREATE DATABASE ${DB_NAME};"
sudo mysql -e "CREATE USER '${DB_USER}'@'localhost' IDENTIFIED BY '${DB_PASS}';"
sudo mysql -e "GRANT ALL PRIVILEGES ON ${DB_NAME}.* TO '${DB_USER}'@'localhost';"
sudo mysql -e "FLUSH PRIVILEGES;"
EOF

#BOAS PRATICAS PHP.ini
# Define as configurações desejadas para o php.ini
TIMEZONE="America/Sao_Paulo"
MEMORY_LIMIT="512M"
MAX_EXECUTION_TIME="300"
UPLOAD_MAX_FILESIZE="20M"
POST_MAX_SIZE="25M"
ERROR_REPORTING="E_ALL & ~E_NOTICE & ~E_STRICT & ~E_DEPRECATED"
DISPLAY_ERRORS="Off"
LOG_ERRORS="On"
ERROR_LOG="/var/log/php_errors.log"
SESSION_GC_MAXLIFETIME="1440"
SESSION_SAVE_PATH="/var/lib/php/sessions"
DISABLE_FUNCTIONS="exec,passthru,shell_exec,system,proc_open,popen,show_source"
EXPOSE_PHP="Off"
MAX_INPUT_VARS="3000"
MAX_INPUT_TIME="600"
OPCACHE_ENABLE="1"
OPCACHE_MEMORY="128"
OPCACHE_MAX_FILES="4000"
OPCACHE_VALIDATE_TIMESTAMPS="1"
OPCACHE_REVALIDATE_FREQ="60"
SHORT_OPEN_TAG="Off"


# Encontra todos os arquivos php.ini no sistema
find / -type f -name "php.ini" 2>/dev/null | while read -r php_ini; do
    echo "Configurando $php_ini..."

    # Define ou atualiza cada configuração
    sed -i "s|^memory_limit.*|memory_limit = $MEMORY_LIMIT|" "$php_ini"
    sed -i "s|^max_execution_time.*|max_execution_time = $MAX_EXECUTION_TIME|" "$php_ini"
    sed -i "s|^upload_max_filesize.*|upload_max_filesize = $UPLOAD_MAX_FILESIZE|" "$php_ini"
    sed -i "s|^post_max_size.*|post_max_size = $POST_MAX_SIZE|" "$php_ini"
    sed -i "s|^date.timezone.*|date.timezone = \"$TIMEZONE\"|" "$php_ini"
    sed -i "s|^error_reporting.*|error_reporting = $ERROR_REPORTING|" "$php_ini"
    sed -i "s|^display_errors.*|display_errors = $DISPLAY_ERRORS|" "$php_ini"
    sed -i "s|^log_errors.*|log_errors = $LOG_ERRORS|" "$php_ini"
    sed -i "s|^error_log.*|error_log = $ERROR_LOG|" "$php_ini"
    sed -i "s|^session.gc_maxlifetime.*|session.gc_maxlifetime = $SESSION_GC_MAXLIFETIME|" "$php_ini"
    sed -i "s|^session.save_path.*|session.save_path = \"$SESSION_SAVE_PATH\"|" "$php_ini"
    sed -i "s|^disable_functions.*|disable_functions = $DISABLE_FUNCTIONS|" "$php_ini"
    sed -i "s|^expose_php.*|expose_php = $EXPOSE_PHP|" "$php_ini"
    sed -i "s|^max_input_vars.*|max_input_vars = $MAX_INPUT_VARS|" "$php_ini"
    sed -i "s|^max_input_time.*|max_input_time = $MAX_INPUT_TIME|" "$php_ini"
    sed -i "s|^max_input_time.*|max_input_time = $MAX_INPUT_TIME|" "$php_ini"

    # Configurações de OpCache
    sed -i "s|^opcache.enable.*|opcache.enable = $OPCACHE_ENABLE|" "$php_ini"
    sed -i "s|^opcache.memory_consumption.*|opcache.memory_consumption = $OPCACHE_MEMORY|" "$php_ini"
    sed -i "s|^opcache.max_accelerated_files.*|opcache.max_accelerated_files = $OPCACHE_MAX_FILES|" "$php_ini"
    sed -i "s|^opcache.validate_timestamps.*|opcache.validate_timestamps = $OPCACHE_VALIDATE_TIMESTAMPS|" "$php_ini"
    sed -i "s|^short_open_tag.*|short_open_tag = $SHORT_OPEN_TAG|" "$php_ini"

    # Se o timezone não existir, adiciona a configuração ao final do arquivo
    if ! grep -q "^date.timezone" "$php_ini"; then
        echo -e "\n; Definindo timezone\ndate.timezone = \"$TIMEZONE\"" >> "$php_ini"
    fi

    echo "Configurações aplicadas em $php_ini."
done

#--------------------------------------
# SSL TLS
#--------------------------------------
cd /etc/pki/tls/

###############################
site="blog.creamy.com.br"
###############################

openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -keyout /etc/pki/tls/${site}.key -out /etc/pki/tls/${site}.crt -subj "/C=SE/ST=Some-State/O=Internet Widgits Pty Ltd/CN=${site}"
sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/pki/tls/localhost.key -out /etc/pki/tls/localhost.pem

#--------------------------------------
# Configurar Nginx para o WordPress
#--------------------------------------
mkdir /etc/nginx/vhost.d
cat > /etc/nginx/conf.d/realip.conf <<EOF
#Local
set_real_ip_from 127.0.0.1;
set_real_ip_from 10.70.0.10;
set_real_ip_from 0.0.0.0/0;
                            
#                            # Header Config
#                            real_ip_header "X-Forwarded-For";
#                            EOF
#                            
#                            cat > /etc/nginx/conf.d/tls.conf <<EOF
#                            ssl_certificate /etc/pki/tls/localhost.pem;
#                            ssl_certificate_key /etc/pki/tls/localhost.pem;
#                            ssl_session_timeout 1d;
#                            ssl_session_cache shared:MozSSL:10m;  # about 40000 sessions
#                            ssl_session_tickets off;
#                            
#                            # curl https://ssl-config.mozilla.org/ffdhe2048.txt > /path/to/dhparam
#                            ssl_dhparam /etc/pki/tls/dh2048.pem;
#                            
#                            # intermediate configuration
#                            ssl_protocols TLSv1.2 TLSv1.3;
#                            ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305;
#                            ssl_prefer_server_ciphers off;
#                            EOF

cat > /etc/nginx/conf.d/php-fpm.conf  <<EOF
# PHP-FPM FastCGI server
# network or unix domain socket configuration

upstream php-fpm {
        server unix:/run/php-fpm/www.sock;
}
EOF

cat > /etc/nginx/conf.d/realip.conf   <<EOF
#Local
set_real_ip_from 127.0.0.1;
set_real_ip_from 10.70.0.10;
set_real_ip_from 0.0.0.0/0;

# Header Config
real_ip_header "X-Forwarded-For";
EOF


cat > /etc/nginx/conf.d/$site.conf   <<EOF
# PHP-FPM FastCGI server
# network or unix domain socket configuration

upstream ${site}{
        server unix:/var/www/system/php/${site}.sock;
}
EOF



# config nginx 
cat > /etc/nginx/nginx.conf <<EOF
# For more information on configuration, see:
#   * Official English Documentation: http://nginx.org/en/docs/
#   * Official Russian Documentation: http://nginx.org/ru/docs/

user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log;
pid /run/nginx.pid;

worker_rlimit_nofile 204800;

# Load dynamic modules. See /usr/share/doc/nginx/README.dynamic.
include /usr/share/nginx/modules/*.conf;

events {
    worker_connections  65535;
    multi_accept on;
    use epoll;
}


http {
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    server_tokens off;
    charset UTF-8;
    client_header_buffer_size 32k;
    large_client_header_buffers 4 32k;
    client_header_timeout 100;
    client_body_timeout 100;
    client_max_body_size 800m;
    client_body_buffer_size 512k;
    reset_timedout_connection on;
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 75 20;
    types_hash_max_size 2048;

    include             /etc/nginx/mime.types;
    default_type        application/octet-stream;

    # Load modular configuration files from the /etc/nginx/conf.d directory.
    # See http://nginx.org/en/docs/ngx_core_module.html#include
    # for more information.
    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/vhost.d/*.conf;
}
EOF

cat  > /etc/nginx/vhost.d/001-${site}.conf << 'EOF'
server {
	listen *:80;
	server_name ${site} www.${site};

	root /var/www/vhosts/${site}/public_html;

	return 301 https://${site}$request_uri;
	location ~* ^.+\.(css|js|jpg|jpeg|gif|png|ico|gz|svg|svgz|ttf|otf|woff|woff2|eot|mp4|ogg|ogv|webm|webp|zip|swf|map)$ {
		aio threads;
		# Tenta servir arquivos estáticos e retorna 404 se não encontrado
		try_files $uri $uri/ /index.php?$args;
	}


	location ^~ /wp-content/cache/ {
		# Desabilita o processamento de PHP nesta localização
		location ~* \.php$ { return 403; }

     		aio threads;
		# Adiciona cabeçalhos para cache avançado
		#expires $expires;

		# Tenta servir arquivos estáticos e retorna 404 se não encontrado
		try_files $uri $uri/ =404;
	}

	etag off;

	location / {
	        index  index.html index.htm index.php;
	        try_files $uri $uri/ /index.php?$args;
	}
	location ~ \.php$ {
	        expires        -1d;
	        fastcgi_pass   ${site};
	        fastcgi_index  index.php;
	        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
	        include        fastcgi_params;
	        fastcgi_param  PHP_VALUE "default_charset=utf-8";
	}

	access_log /var/log/nginx/${site}-access.log;
	error_log /var/log/nginx/${site}-error.log;
}

server {
	listen *:443 ssl;
	server_name ${site} www.${site};

	#ssl_certificate      /etc/pki/tls/${site}.crt;
	#ssl_certificate_key  /etc/pki/tls/${site}.key;

	keepalive_timeout  65;
	root /var/www/vhosts/${site}/public_html;
	etag off;

	# Custom Nimbus
	sendfile       on;
	tcp_nopush     on;
	tcp_nodelay    on;
	proxy_ignore_client_abort on;
	client_max_body_size 100m;
	include wordpress.d/*.conf;
	location ~* ^.+\.(css|js|jpg|jpeg|gif|png|ico|gz|svg|svgz|ttf|otf|woff|woff2|eot|mp4|ogg|ogv|webm|webp|zip|swf|map)$ {
		aio threads;
		# Tenta servir arquivos estáticos e retorna 404 se não encontrado
		try_files $uri $uri/ =404;
	}


	location ^~ /wp-content/cache/min/ {
		# Desabilita o processamento de PHP nesta localização
		location ~* \.php$ { return 403; }

	     	aio threads;
		# Adiciona cabeçalhos para cache avançado
		#expires $expires;
	
		# Tenta servir arquivos estáticos e retorna 404 se não encontrado
		try_files $uri $uri/ /index.php?$args;
	}

	location / {
	        index  index.html index.htm index.php;
	        try_files $uri $uri/ /index.php?$args;
	}

	location ~ \.php$ {
	        expires        -1d;
	        fastcgi_pass   ${site};
	        fastcgi_index  index.php;
	        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
	        include        fastcgi_params;
	        fastcgi_param  PHP_VALUE "default_charset=utf-8";
	}

	access_log /var/log/nginx/${site}-access.log;
	error_log /var/log/nginx/${site}-error.log;
}
EOF

sed -i 's/\${site}/blog.skerlt.com.br/g' /etc/nginx/vhost.d/001-log.skelt.com.br.conf


usermod -a -G apache nginx

sudo useradd -m -d /var/www/vhosts/blog.skelt.com.br -g apache blogskelt
cd /var/www/vhosts/blog.skelt.com.br
chown blogskelt: -R * # Deixe o Apache/nginx como proprietário
chmod 750 /var/www/vhosts/blog.skelt.com.br 
find . -type d -exec chmod 755 {} \; # Altere as permissões dos diretórios para rwxr-xr-x
find . -type f -exec chmod 644 {} \; # Altere as permissões dos arquivos para rw-r--r--


sudo useradd -m -d /var/www/vhosts/blog.creamy.com.br -g apache blogcreamy
cd /var/www/vhosts/blog.creamy.com.br
chown blogcreamy: -R * # Deixe o Apache/nginx como proprietário
chmod 750 /var/www/vhosts/blog.creamy.com.br 
find . -type d -exec chmod 755 {} \; # Altere as permissões dos diretórios para rwxr-xr-x
find . -type f -exec chmod 644 {} \; # Altere as permissões dos arquivos para rw-r--r--




