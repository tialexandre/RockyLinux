#--------------------
#DISCOS
#--------------------
pvcreate /dev/sdb
vgcreate -n data /dev/sdb
lvcreate -n mysql -L 20G data
lvcreate -n vhosts -l  data   #(tamanho total disponivel de vgdisplay data)
mkfs.xfs /dev/data/vhosts
mkfs.xfs /dev/data/mysql

mkdir -p /var/www/vhosts
mkdir -p /var/lib/mysql

echo "/dev/data/vhosts				/var/www/vhosts		xfs	defaults	0 0" >> /etc/fatab
echo "/dev/data/mysql				/var/lib/mysql		xfs	defaults	0 0" >> /etc/fatab

#--------------------
# BASE
#--------------------
yum update -y 
yum upgrade -y
dnf -y install epel-release
yum update -y 
yum install glibc-langpack-en glibc-langpack-pt git vim wget net-tools htop iftop iotop nload nmon nethogs ntfs-3g  sshfs parted net-tools ethtool expect -y
echo 'LANG="pt_BR.utf8"' > /etc/locale.conf 

#Desativa segurança
sed -i 's/enforcing/disabled/g' /etc/selinux/config
setenforce 0
systemctl stop firewalld ; systemctl disable firewalld

#Agent Proxmox
dnf install qemu-guest-agent -y
systemctl enable --now  qemu-guest-agent 

#Instala Nginx 
sudo dnf -y install nginx
sudo systemctl enable --now nginx

#Instalar PHP83
Versao=83
VRemi="8.3"
sudo dnf install -y https://rpms.remirepo.net/enterprise/remi-release-9.rpm
sudo dnf module reset php -y
sudo dnf module enable php:remi-${VRemi}-y
# Instalar o PHP 8.3 e os módulos especificados
sudo dnf install -y php
sudo dnf install -y php-bz2
sudo dnf install -y php-calendar 
sudo dnf install -y php-cli 
sudo dnf install -y php-ctype 
sudo dnf install -y php-curl 
sudo dnf install -y php-date 
sudo dnf install -y php-devel 
sudo dnf install -y php-dom 
sudo dnf install -y php-exif
sudo dnf install -y php-fileinfo
sudo dnf install -y php-filter 
sudo dnf install -y php-ftp 
sudo dnf install -y php-gd
sudo dnf install -y php-gettext
sudo dnf install -y php-hash
sudo dnf install -y php-iconv
sudo dnf install -y php-intl
sudo dnf install -y php-json
sudo dnf install -y php-libxml
sudo dnf install -y php-mbstring
sudo dnf install -y php-mysqli
sudo dnf install -y php-mysqlnd
sudo dnf install -y php-openssl
sudo dnf install -y php-pcntl
sudo dnf install -y php-pcre
sudo dnf install -y php-pear
sudo dnf install -y php-pdo
sudo dnf install -y php-pdo_mysql
sudo dnf install -y php-pdo_sqlite
sudo dnf install -y php-readline
sudo dnf install -y php-session
sudo dnf install -y php-sockets
sudo dnf install -y php-sqlite3
sudo dnf install -y php-tokenizer
sudo dnf install -y php-xml
sudo dnf install -y php-xmlreader
sudo dnf install -y php-xmlwriter
sudo dnf install -y php-xsl
sudo dnf install -y php-zip
sudo dnf install -y php-zlib
sudo dnf install -y php-mcrypt
sudo dnf install -y php-mysqlnd
sudo dnf install -y php-jsonlint.noarch 
sudo dnf install -y php${Versao}*-imap*
sudo dnf install -y php${Versao}-php-gd 
sudo dnf install -y php${Versao}-php-zip 
sudo dnf install -y php${Versao}-php*imagick-im7*
sudo dnf install -y php-jsonlint.noarch
sudo dnf install -y php${Versao}-php-gd 
sudo dnf install -y php${Versao}-php-zip  
sudo dnf install -y php${Versao}*-*xmlrpc*
no "n" | sudo pecl install apcu
sudo pecl install simdjson
echo "extension=apcu.so" | sudo tee /etc/php.d/40-apcu.ini
sudo systemctl enable --now php-fpm

# Configurar PHP-FPM para Nginx
sudo sed -i 's/listen = .*/listen = \/run\/php-fpm\/www.sock/' /etc/php-fpm.d/www.conf
sudo sed -i 's/;listen.owner = nobody/listen.owner = nginx/' /etc/php-fpm.d/www.conf
sudo sed -i 's/;listen.group = nobody/listen.group = nginx/' /etc/php-fpm.d/www.conf
sudo sed -i 's/user = apache/user = nginx/' /etc/php-fpm.d/www.conf
sudo sed -i 's/group = apache/group = nginx/' /etc/php-fpm.d/www.conf
sudo systemctl restart php-fpm

#Instalar MySQL
sudo rpm --import https://repo.mysql.com/RPM-GPG-KEY-mysql-2023
sudo dnf install -y https://dev.mysql.com/get/mysql80-community-release-el9-1.noarch.rpm
sudo dnf install -y mysql-community-server
echo "default-authentication-plugin=mysql_native_password" >> /etc/my.cnf
sudo systemctl enable --now mysqld


#Configura SQL
NEW_ROOT_PASSWORD="1QF*Mgcsx&Mt@#" 
DB_MYSQL="wpcreamy"
USER_MYSQL="wpcreamy"
PASS_MYSQL="kv7AfE.zX5AVhF"

# Extrair a senha temporária do usuário root
ROOT_PASSWORD=$(sudo grep 'temporary password' /var/log/mysqld.log | awk '{print $NF}')

# Definir uma nova senha segura para o usuário root
echo $NEW_ROOT_PASSWORD > /root/mysqlpass.txt
mysql --connect-expired-password -u root -p "$ROOT_PASSWORD" <<EOF
ALTER USER 'root'@'localhost' IDENTIFIED BY '$NEW_ROOT_PASSWORD';
EOF
# Configurar o banco de dados para o WordPress
DB_NAME="wordpress_db"
DB_USER="wordpress_user"
DB_PASS="strong_password_here"

sudo mysql -e "CREATE DATABASE ${DB_NAME};"
sudo mysql -e "CREATE USER '${DB_USER}'@'localhost' IDENTIFIED BY '${DB_PASS}';"
sudo mysql -e "GRANT ALL PRIVILEGES ON ${DB_NAME}.* TO '${DB_USER}'@'localhost';"
sudo mysql -e "FLUSH PRIVILEGES;"
EOF

#BOAS PRATICAS PHP.ini
# Define as configurações desejadas para o php.ini
TIMEZONE="America/Sao_Paulo"
MEMORY_LIMIT="512M"
MAX_EXECUTION_TIME="300"
UPLOAD_MAX_FILESIZE="20M"
POST_MAX_SIZE="25M"
ERROR_REPORTING="E_ALL & ~E_NOTICE & ~E_STRICT & ~E_DEPRECATED"
DISPLAY_ERRORS="Off"
LOG_ERRORS="On"
ERROR_LOG="/var/log/php_errors.log"
SESSION_GC_MAXLIFETIME="1440"
SESSION_SAVE_PATH="/var/lib/php/sessions"
DISABLE_FUNCTIONS="exec,passthru,shell_exec,system,proc_open,popen,show_source"
EXPOSE_PHP="Off"
MAX_INPUT_VARS="3000"
MAX_INPUT_TIME="600"
OPCACHE_ENABLE="1"
OPCACHE_MEMORY="128"
OPCACHE_MAX_FILES="4000"
OPCACHE_VALIDATE_TIMESTAMPS="1"
OPCACHE_REVALIDATE_FREQ="60"
SHORT_OPEN_TAG="Off"


# Encontra todos os arquivos php.ini no sistema
find / -type f -name "php.ini" 2>/dev/null | while read -r php_ini; do
    echo "Configurando $php_ini..."

    # Define ou atualiza cada configuração
    sed -i "s|^memory_limit.*|memory_limit = $MEMORY_LIMIT|" "$php_ini"
    sed -i "s|^max_execution_time.*|max_execution_time = $MAX_EXECUTION_TIME|" "$php_ini"
    sed -i "s|^upload_max_filesize.*|upload_max_filesize = $UPLOAD_MAX_FILESIZE|" "$php_ini"
    sed -i "s|^post_max_size.*|post_max_size = $POST_MAX_SIZE|" "$php_ini"
    sed -i "s|^date.timezone.*|date.timezone = \"$TIMEZONE\"|" "$php_ini"
    sed -i "s|^error_reporting.*|error_reporting = $ERROR_REPORTING|" "$php_ini"
    sed -i "s|^display_errors.*|display_errors = $DISPLAY_ERRORS|" "$php_ini"
    sed -i "s|^log_errors.*|log_errors = $LOG_ERRORS|" "$php_ini"
    sed -i "s|^error_log.*|error_log = $ERROR_LOG|" "$php_ini"
    sed -i "s|^session.gc_maxlifetime.*|session.gc_maxlifetime = $SESSION_GC_MAXLIFETIME|" "$php_ini"
    sed -i "s|^session.save_path.*|session.save_path = \"$SESSION_SAVE_PATH\"|" "$php_ini"
    sed -i "s|^disable_functions.*|disable_functions = $DISABLE_FUNCTIONS|" "$php_ini"
    sed -i "s|^expose_php.*|expose_php = $EXPOSE_PHP|" "$php_ini"
    sed -i "s|^max_input_vars.*|max_input_vars = $MAX_INPUT_VARS|" "$php_ini"
    sed -i "s|^max_input_time.*|max_input_time = $MAX_INPUT_TIME|" "$php_ini"
    sed -i "s|^max_input_time.*|max_input_time = $MAX_INPUT_TIME|" "$php_ini"

    # Configurações de OpCache
    sed -i "s|^opcache.enable.*|opcache.enable = $OPCACHE_ENABLE|" "$php_ini"
    sed -i "s|^opcache.memory_consumption.*|opcache.memory_consumption = $OPCACHE_MEMORY|" "$php_ini"
    sed -i "s|^opcache.max_accelerated_files.*|opcache.max_accelerated_files = $OPCACHE_MAX_FILES|" "$php_ini"
    sed -i "s|^opcache.validate_timestamps.*|opcache.validate_timestamps = $OPCACHE_VALIDATE_TIMESTAMPS|" "$php_ini"
    sed -i "s|^short_open_tag.*|short_open_tag = $SHORT_OPEN_TAG|" "$php_ini"

    # Se o timezone não existir, adiciona a configuração ao final do arquivo
    if ! grep -q "^date.timezone" "$php_ini"; then
        echo -e "\n; Definindo timezone\ndate.timezone = \"$TIMEZONE\"" >> "$php_ini"
    fi

    echo "Configurações aplicadas em $php_ini."
done

#--------------------------------------
# SSL TLS
#--------------------------------------
cd /etc/pki/tls/
site="blog.creamy.com.br"
openssl req -x509 -nodes -days 3650 -newkey rsa:2048 -keyout /etc/pki/tls/${site}.key -out /etc/pki/tls/${site}.crt -subj "/C=SE/ST=Some-State/O=Internet Widgits Pty Ltd/CN=${site}"

#--------------------------------------
# Configurar Nginx para o WordPress
#--------------------------------------
cat > /etc/nginx/conf.d/realip.conf <<EOF
#Local
set_real_ip_from 127.0.0.1;
set_real_ip_from 10.70.0.10;
set_real_ip_from 0.0.0.0/0;

# Header Config
real_ip_header "X-Forwarded-For";
EOF

cat > /etc/nginx/conf.d/tls.conf <<EOF
ssl_certificate /etc/pki/tls/localhost.pem;
ssl_certificate_key /etc/pki/tls/localhost.pem;
ssl_session_timeout 1d;
ssl_session_cache shared:MozSSL:10m;  # about 40000 sessions
ssl_session_tickets off;

# curl https://ssl-config.mozilla.org/ffdhe2048.txt > /path/to/dhparam
ssl_dhparam /etc/pki/tls/dh2048.pem;

# intermediate configuration
ssl_protocols TLSv1.2 TLSv1.3;
ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-CHACHA20-POLY1305;
ssl_prefer_server_ciphers off;
EOF


sudo bash -c 'cat > /etc/nginx/conf.d/001-wordpress.conf <<EOF
server {
    listen 80;
    server_name _;

    root /usr/share/nginx/html;
    index index.php index.html index.htm;

    location / {
        try_files \$uri \$uri/ /index.php?\$args;
    }

    location ~ \.php$ {
        include /etc/nginx/fastcgi_params;
        fastcgi_pass unix:/run/php-fpm/www.sock;
        fastcgi_index index.php;
        fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name;
    }

    location ~* \.(jpg|jpeg|gif|css|png|js|ico|html)$ {
        expires max;
        log_not_found off;
    }
}
EOF'

# Testar configuração e reiniciar Nginx
sudo nginx -t && sudo systemctl restart nginx

# Permitir HTTP e HTTPS no firewall
sudo firewall-cmd --permanent --add-service=http
sudo firewall-cmd --permanent --add-service=https
sudo firewall-cmd --reload
